/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../common";

export declare namespace IBaseSacrifice {
  export type PriceParamStruct = {
    priceMaxPeriod: PromiseOrValue<BigNumberish>;
    minimumPrice: PromiseOrValue<BigNumberish>;
    maximumPrice: PromiseOrValue<BigNumberish>;
  };

  export type PriceParamStructOutput = [BigNumber, BigNumber, BigNumber] & {
    priceMaxPeriod: BigNumber;
    minimumPrice: BigNumber;
    maximumPrice: BigNumber;
  };
}

export declare namespace IElevatedAccess {
  export type ExplicitAccessStruct = {
    fnSelector: PromiseOrValue<BytesLike>;
    allowed: PromiseOrValue<boolean>;
  };

  export type ExplicitAccessStructOutput = [string, boolean] & {
    fnSelector: string;
    allowed: boolean;
  };
}

export interface TempleSacrificeInterface extends utils.Interface {
  functions: {
    "acceptExecutor()": FunctionFragment;
    "customPrice()": FunctionFragment;
    "executor()": FunctionFragment;
    "explicitFunctionAccess(address,bytes4)": FunctionFragment;
    "getPrice()": FunctionFragment;
    "originTime()": FunctionFragment;
    "priceParams()": FunctionFragment;
    "proposeNewExecutor(address)": FunctionFragment;
    "relic()": FunctionFragment;
    "sacrifice(uint256,address)": FunctionFragment;
    "sacrificeToken()": FunctionFragment;
    "sacrificedTokenRecipient()": FunctionFragment;
    "setCustomPrice(uint256)": FunctionFragment;
    "setExplicitAccess(address,(bytes4,bool)[])": FunctionFragment;
    "setOriginTime(uint64)": FunctionFragment;
    "setPriceParams((uint64,uint128,uint128))": FunctionFragment;
    "setSacrificedTokenRecipient(address)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "acceptExecutor"
      | "customPrice"
      | "executor"
      | "explicitFunctionAccess"
      | "getPrice"
      | "originTime"
      | "priceParams"
      | "proposeNewExecutor"
      | "relic"
      | "sacrifice"
      | "sacrificeToken"
      | "sacrificedTokenRecipient"
      | "setCustomPrice"
      | "setExplicitAccess"
      | "setOriginTime"
      | "setPriceParams"
      | "setSacrificedTokenRecipient"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "acceptExecutor",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "customPrice",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "executor", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "explicitFunctionAccess",
    values: [PromiseOrValue<string>, PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(functionFragment: "getPrice", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "originTime",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "priceParams",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "proposeNewExecutor",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(functionFragment: "relic", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "sacrifice",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "sacrificeToken",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "sacrificedTokenRecipient",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setCustomPrice",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setExplicitAccess",
    values: [PromiseOrValue<string>, IElevatedAccess.ExplicitAccessStruct[]]
  ): string;
  encodeFunctionData(
    functionFragment: "setOriginTime",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setPriceParams",
    values: [IBaseSacrifice.PriceParamStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "setSacrificedTokenRecipient",
    values: [PromiseOrValue<string>]
  ): string;

  decodeFunctionResult(
    functionFragment: "acceptExecutor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "customPrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "executor", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "explicitFunctionAccess",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getPrice", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "originTime", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "priceParams",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "proposeNewExecutor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "relic", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "sacrifice", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "sacrificeToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "sacrificedTokenRecipient",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setCustomPrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setExplicitAccess",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setOriginTime",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setPriceParams",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setSacrificedTokenRecipient",
    data: BytesLike
  ): Result;

  events: {
    "CustomPriceSet(uint256)": EventFragment;
    "ExplicitAccessSet(address,bytes4,bool)": EventFragment;
    "NewExecutorAccepted(address,address)": EventFragment;
    "NewExecutorProposed(address,address,address)": EventFragment;
    "OriginTimeSet(uint64)": EventFragment;
    "PartnerZeroSacrificed(address,uint256,uint256)": EventFragment;
    "PriceParamsSet(tuple)": EventFragment;
    "RelicMintCapSet(uint256)": EventFragment;
    "TokenRecipientSet(address)": EventFragment;
    "TokenSacrificed(address,address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "CustomPriceSet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ExplicitAccessSet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NewExecutorAccepted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NewExecutorProposed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OriginTimeSet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PartnerZeroSacrificed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PriceParamsSet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RelicMintCapSet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TokenRecipientSet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TokenSacrificed"): EventFragment;
}

export interface CustomPriceSetEventObject {
  price: BigNumber;
}
export type CustomPriceSetEvent = TypedEvent<
  [BigNumber],
  CustomPriceSetEventObject
>;

export type CustomPriceSetEventFilter = TypedEventFilter<CustomPriceSetEvent>;

export interface ExplicitAccessSetEventObject {
  account: string;
  fnSelector: string;
  value: boolean;
}
export type ExplicitAccessSetEvent = TypedEvent<
  [string, string, boolean],
  ExplicitAccessSetEventObject
>;

export type ExplicitAccessSetEventFilter =
  TypedEventFilter<ExplicitAccessSetEvent>;

export interface NewExecutorAcceptedEventObject {
  oldExecutor: string;
  newExecutor: string;
}
export type NewExecutorAcceptedEvent = TypedEvent<
  [string, string],
  NewExecutorAcceptedEventObject
>;

export type NewExecutorAcceptedEventFilter =
  TypedEventFilter<NewExecutorAcceptedEvent>;

export interface NewExecutorProposedEventObject {
  oldExecutor: string;
  oldProposedExecutor: string;
  newProposedExecutor: string;
}
export type NewExecutorProposedEvent = TypedEvent<
  [string, string, string],
  NewExecutorProposedEventObject
>;

export type NewExecutorProposedEventFilter =
  TypedEventFilter<NewExecutorProposedEvent>;

export interface OriginTimeSetEventObject {
  originTime: BigNumber;
}
export type OriginTimeSetEvent = TypedEvent<
  [BigNumber],
  OriginTimeSetEventObject
>;

export type OriginTimeSetEventFilter = TypedEventFilter<OriginTimeSetEvent>;

export interface PartnerZeroSacrificedEventObject {
  to: string;
  relicId: BigNumber;
  enclaveId: BigNumber;
}
export type PartnerZeroSacrificedEvent = TypedEvent<
  [string, BigNumber, BigNumber],
  PartnerZeroSacrificedEventObject
>;

export type PartnerZeroSacrificedEventFilter =
  TypedEventFilter<PartnerZeroSacrificedEvent>;

export interface PriceParamsSetEventObject {
  params: IBaseSacrifice.PriceParamStructOutput;
}
export type PriceParamsSetEvent = TypedEvent<
  [IBaseSacrifice.PriceParamStructOutput],
  PriceParamsSetEventObject
>;

export type PriceParamsSetEventFilter = TypedEventFilter<PriceParamsSetEvent>;

export interface RelicMintCapSetEventObject {
  cap: BigNumber;
}
export type RelicMintCapSetEvent = TypedEvent<
  [BigNumber],
  RelicMintCapSetEventObject
>;

export type RelicMintCapSetEventFilter = TypedEventFilter<RelicMintCapSetEvent>;

export interface TokenRecipientSetEventObject {
  recipient: string;
}
export type TokenRecipientSetEvent = TypedEvent<
  [string],
  TokenRecipientSetEventObject
>;

export type TokenRecipientSetEventFilter =
  TypedEventFilter<TokenRecipientSetEvent>;

export interface TokenSacrificedEventObject {
  fromAccount: string;
  token: string;
  amount: BigNumber;
}
export type TokenSacrificedEvent = TypedEvent<
  [string, string, BigNumber],
  TokenSacrificedEventObject
>;

export type TokenSacrificedEventFilter = TypedEventFilter<TokenSacrificedEvent>;

export interface TempleSacrifice extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: TempleSacrificeInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    acceptExecutor(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    customPrice(overrides?: CallOverrides): Promise<[BigNumber]>;

    executor(overrides?: CallOverrides): Promise<[string]>;

    explicitFunctionAccess(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    getPrice(overrides?: CallOverrides): Promise<[BigNumber]>;

    originTime(overrides?: CallOverrides): Promise<[BigNumber]>;

    priceParams(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        priceMaxPeriod: BigNumber;
        minimumPrice: BigNumber;
        maximumPrice: BigNumber;
      }
    >;

    proposeNewExecutor(
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    relic(overrides?: CallOverrides): Promise<[string]>;

    sacrifice(
      enclaveId: PromiseOrValue<BigNumberish>,
      to: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    sacrificeToken(overrides?: CallOverrides): Promise<[string]>;

    sacrificedTokenRecipient(overrides?: CallOverrides): Promise<[string]>;

    setCustomPrice(
      _price: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setExplicitAccess(
      allowedCaller: PromiseOrValue<string>,
      access: IElevatedAccess.ExplicitAccessStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setOriginTime(
      _originTime: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setPriceParams(
      _priceParams: IBaseSacrifice.PriceParamStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setSacrificedTokenRecipient(
      recipient: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  acceptExecutor(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  customPrice(overrides?: CallOverrides): Promise<BigNumber>;

  executor(overrides?: CallOverrides): Promise<string>;

  explicitFunctionAccess(
    arg0: PromiseOrValue<string>,
    arg1: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  getPrice(overrides?: CallOverrides): Promise<BigNumber>;

  originTime(overrides?: CallOverrides): Promise<BigNumber>;

  priceParams(
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber] & {
      priceMaxPeriod: BigNumber;
      minimumPrice: BigNumber;
      maximumPrice: BigNumber;
    }
  >;

  proposeNewExecutor(
    account: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  relic(overrides?: CallOverrides): Promise<string>;

  sacrifice(
    enclaveId: PromiseOrValue<BigNumberish>,
    to: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  sacrificeToken(overrides?: CallOverrides): Promise<string>;

  sacrificedTokenRecipient(overrides?: CallOverrides): Promise<string>;

  setCustomPrice(
    _price: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setExplicitAccess(
    allowedCaller: PromiseOrValue<string>,
    access: IElevatedAccess.ExplicitAccessStruct[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setOriginTime(
    _originTime: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setPriceParams(
    _priceParams: IBaseSacrifice.PriceParamStruct,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setSacrificedTokenRecipient(
    recipient: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    acceptExecutor(overrides?: CallOverrides): Promise<void>;

    customPrice(overrides?: CallOverrides): Promise<BigNumber>;

    executor(overrides?: CallOverrides): Promise<string>;

    explicitFunctionAccess(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    getPrice(overrides?: CallOverrides): Promise<BigNumber>;

    originTime(overrides?: CallOverrides): Promise<BigNumber>;

    priceParams(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        priceMaxPeriod: BigNumber;
        minimumPrice: BigNumber;
        maximumPrice: BigNumber;
      }
    >;

    proposeNewExecutor(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    relic(overrides?: CallOverrides): Promise<string>;

    sacrifice(
      enclaveId: PromiseOrValue<BigNumberish>,
      to: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    sacrificeToken(overrides?: CallOverrides): Promise<string>;

    sacrificedTokenRecipient(overrides?: CallOverrides): Promise<string>;

    setCustomPrice(
      _price: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setExplicitAccess(
      allowedCaller: PromiseOrValue<string>,
      access: IElevatedAccess.ExplicitAccessStruct[],
      overrides?: CallOverrides
    ): Promise<void>;

    setOriginTime(
      _originTime: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setPriceParams(
      _priceParams: IBaseSacrifice.PriceParamStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    setSacrificedTokenRecipient(
      recipient: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "CustomPriceSet(uint256)"(price?: null): CustomPriceSetEventFilter;
    CustomPriceSet(price?: null): CustomPriceSetEventFilter;

    "ExplicitAccessSet(address,bytes4,bool)"(
      account?: PromiseOrValue<string> | null,
      fnSelector?: PromiseOrValue<BytesLike> | null,
      value?: PromiseOrValue<boolean> | null
    ): ExplicitAccessSetEventFilter;
    ExplicitAccessSet(
      account?: PromiseOrValue<string> | null,
      fnSelector?: PromiseOrValue<BytesLike> | null,
      value?: PromiseOrValue<boolean> | null
    ): ExplicitAccessSetEventFilter;

    "NewExecutorAccepted(address,address)"(
      oldExecutor?: PromiseOrValue<string> | null,
      newExecutor?: PromiseOrValue<string> | null
    ): NewExecutorAcceptedEventFilter;
    NewExecutorAccepted(
      oldExecutor?: PromiseOrValue<string> | null,
      newExecutor?: PromiseOrValue<string> | null
    ): NewExecutorAcceptedEventFilter;

    "NewExecutorProposed(address,address,address)"(
      oldExecutor?: PromiseOrValue<string> | null,
      oldProposedExecutor?: PromiseOrValue<string> | null,
      newProposedExecutor?: PromiseOrValue<string> | null
    ): NewExecutorProposedEventFilter;
    NewExecutorProposed(
      oldExecutor?: PromiseOrValue<string> | null,
      oldProposedExecutor?: PromiseOrValue<string> | null,
      newProposedExecutor?: PromiseOrValue<string> | null
    ): NewExecutorProposedEventFilter;

    "OriginTimeSet(uint64)"(originTime?: null): OriginTimeSetEventFilter;
    OriginTimeSet(originTime?: null): OriginTimeSetEventFilter;

    "PartnerZeroSacrificed(address,uint256,uint256)"(
      to?: PromiseOrValue<string> | null,
      relicId?: null,
      enclaveId?: null
    ): PartnerZeroSacrificedEventFilter;
    PartnerZeroSacrificed(
      to?: PromiseOrValue<string> | null,
      relicId?: null,
      enclaveId?: null
    ): PartnerZeroSacrificedEventFilter;

    "PriceParamsSet(tuple)"(params?: null): PriceParamsSetEventFilter;
    PriceParamsSet(params?: null): PriceParamsSetEventFilter;

    "RelicMintCapSet(uint256)"(cap?: null): RelicMintCapSetEventFilter;
    RelicMintCapSet(cap?: null): RelicMintCapSetEventFilter;

    "TokenRecipientSet(address)"(
      recipient?: null
    ): TokenRecipientSetEventFilter;
    TokenRecipientSet(recipient?: null): TokenRecipientSetEventFilter;

    "TokenSacrificed(address,address,uint256)"(
      fromAccount?: PromiseOrValue<string> | null,
      token?: PromiseOrValue<string> | null,
      amount?: null
    ): TokenSacrificedEventFilter;
    TokenSacrificed(
      fromAccount?: PromiseOrValue<string> | null,
      token?: PromiseOrValue<string> | null,
      amount?: null
    ): TokenSacrificedEventFilter;
  };

  estimateGas: {
    acceptExecutor(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    customPrice(overrides?: CallOverrides): Promise<BigNumber>;

    executor(overrides?: CallOverrides): Promise<BigNumber>;

    explicitFunctionAccess(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPrice(overrides?: CallOverrides): Promise<BigNumber>;

    originTime(overrides?: CallOverrides): Promise<BigNumber>;

    priceParams(overrides?: CallOverrides): Promise<BigNumber>;

    proposeNewExecutor(
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    relic(overrides?: CallOverrides): Promise<BigNumber>;

    sacrifice(
      enclaveId: PromiseOrValue<BigNumberish>,
      to: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    sacrificeToken(overrides?: CallOverrides): Promise<BigNumber>;

    sacrificedTokenRecipient(overrides?: CallOverrides): Promise<BigNumber>;

    setCustomPrice(
      _price: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setExplicitAccess(
      allowedCaller: PromiseOrValue<string>,
      access: IElevatedAccess.ExplicitAccessStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setOriginTime(
      _originTime: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setPriceParams(
      _priceParams: IBaseSacrifice.PriceParamStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setSacrificedTokenRecipient(
      recipient: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    acceptExecutor(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    customPrice(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    executor(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    explicitFunctionAccess(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPrice(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    originTime(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    priceParams(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    proposeNewExecutor(
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    relic(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    sacrifice(
      enclaveId: PromiseOrValue<BigNumberish>,
      to: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    sacrificeToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    sacrificedTokenRecipient(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    setCustomPrice(
      _price: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setExplicitAccess(
      allowedCaller: PromiseOrValue<string>,
      access: IElevatedAccess.ExplicitAccessStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setOriginTime(
      _originTime: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setPriceParams(
      _priceParams: IBaseSacrifice.PriceParamStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setSacrificedTokenRecipient(
      recipient: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
