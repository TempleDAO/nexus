/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../common";

export declare namespace IShard {
  export type RecipeStruct = {
    inputShardIds: PromiseOrValue<BigNumberish>[];
    inputShardAmounts: PromiseOrValue<BigNumberish>[];
    outputShardIds: PromiseOrValue<BigNumberish>[];
    outputShardAmounts: PromiseOrValue<BigNumberish>[];
  };

  export type RecipeStructOutput = [
    BigNumber[],
    BigNumber[],
    BigNumber[],
    BigNumber[]
  ] & {
    inputShardIds: BigNumber[];
    inputShardAmounts: BigNumber[];
    outputShardIds: BigNumber[];
    outputShardAmounts: BigNumber[];
  };

  export type MintInfoStruct = {
    shardId: PromiseOrValue<BigNumberish>;
    cap: PromiseOrValue<BigNumberish>;
    balance: PromiseOrValue<BigNumberish>;
  };

  export type MintInfoStructOutput = [BigNumber, BigNumber, BigNumber] & {
    shardId: BigNumber;
    cap: BigNumber;
    balance: BigNumber;
  };
}

export declare namespace IElevatedAccess {
  export type ExplicitAccessStruct = {
    fnSelector: PromiseOrValue<BytesLike>;
    allowed: PromiseOrValue<boolean>;
  };

  export type ExplicitAccessStructOutput = [string, boolean] & {
    fnSelector: string;
    allowed: boolean;
  };
}

export interface ShardInterface extends utils.Interface {
  functions: {
    "acceptExecutor()": FunctionFragment;
    "addRecipe((uint256[],uint256[],uint256[],uint256[]))": FunctionFragment;
    "allowedShardCaps(address,uint256)": FunctionFragment;
    "balanceOf(address,uint256)": FunctionFragment;
    "balanceOfBatch(address[],uint256[])": FunctionFragment;
    "burn(address,uint256,uint256)": FunctionFragment;
    "burnBatch(address,uint256[],uint256[])": FunctionFragment;
    "deleteRecipe(uint256)": FunctionFragment;
    "executor()": FunctionFragment;
    "explicitFunctionAccess(address,bytes4)": FunctionFragment;
    "getMintInfo(address)": FunctionFragment;
    "getMinterAllowedShardIds(address)": FunctionFragment;
    "getRecipeInfo(uint256)": FunctionFragment;
    "isApprovedForAll(address,address)": FunctionFragment;
    "isShardId(uint256)": FunctionFragment;
    "mintBalances(address,uint256)": FunctionFragment;
    "mintBatch(address,uint256[],uint256[])": FunctionFragment;
    "nextRecipeId()": FunctionFragment;
    "nextTokenId()": FunctionFragment;
    "nexusCommon()": FunctionFragment;
    "proposeNewExecutor(address)": FunctionFragment;
    "relic()": FunctionFragment;
    "safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)": FunctionFragment;
    "safeTransferFrom(address,address,uint256,uint256,bytes)": FunctionFragment;
    "setAllowedShardCaps(address,uint256[],uint256[])": FunctionFragment;
    "setApprovalForAll(address,bool)": FunctionFragment;
    "setExplicitAccess(address,(bytes4,bool)[])": FunctionFragment;
    "setMinterAllowedShardIds(address,uint256[],bool[])": FunctionFragment;
    "setNewMinterShards(address[])": FunctionFragment;
    "setNexusCommon(address)": FunctionFragment;
    "setShardUri(uint256,string)": FunctionFragment;
    "supportsInterface(bytes4)": FunctionFragment;
    "totalShardMints(uint256)": FunctionFragment;
    "transmute(uint256)": FunctionFragment;
    "uri(uint256)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "acceptExecutor"
      | "addRecipe"
      | "allowedShardCaps"
      | "balanceOf"
      | "balanceOfBatch"
      | "burn"
      | "burnBatch"
      | "deleteRecipe"
      | "executor"
      | "explicitFunctionAccess"
      | "getMintInfo"
      | "getMinterAllowedShardIds"
      | "getRecipeInfo"
      | "isApprovedForAll"
      | "isShardId"
      | "mintBalances"
      | "mintBatch"
      | "nextRecipeId"
      | "nextTokenId"
      | "nexusCommon"
      | "proposeNewExecutor"
      | "relic"
      | "safeBatchTransferFrom"
      | "safeTransferFrom"
      | "setAllowedShardCaps"
      | "setApprovalForAll"
      | "setExplicitAccess"
      | "setMinterAllowedShardIds"
      | "setNewMinterShards"
      | "setNexusCommon"
      | "setShardUri"
      | "supportsInterface"
      | "totalShardMints"
      | "transmute"
      | "uri"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "acceptExecutor",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "addRecipe",
    values: [IShard.RecipeStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "allowedShardCaps",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "balanceOf",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "balanceOfBatch",
    values: [PromiseOrValue<string>[], PromiseOrValue<BigNumberish>[]]
  ): string;
  encodeFunctionData(
    functionFragment: "burn",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "burnBatch",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>[],
      PromiseOrValue<BigNumberish>[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "deleteRecipe",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(functionFragment: "executor", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "explicitFunctionAccess",
    values: [PromiseOrValue<string>, PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "getMintInfo",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getMinterAllowedShardIds",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getRecipeInfo",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "isApprovedForAll",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "isShardId",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "mintBalances",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "mintBatch",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>[],
      PromiseOrValue<BigNumberish>[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "nextRecipeId",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "nextTokenId",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "nexusCommon",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "proposeNewExecutor",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(functionFragment: "relic", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "safeBatchTransferFrom",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>[],
      PromiseOrValue<BigNumberish>[],
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "safeTransferFrom",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "setAllowedShardCaps",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>[],
      PromiseOrValue<BigNumberish>[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "setApprovalForAll",
    values: [PromiseOrValue<string>, PromiseOrValue<boolean>]
  ): string;
  encodeFunctionData(
    functionFragment: "setExplicitAccess",
    values: [PromiseOrValue<string>, IElevatedAccess.ExplicitAccessStruct[]]
  ): string;
  encodeFunctionData(
    functionFragment: "setMinterAllowedShardIds",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>[],
      PromiseOrValue<boolean>[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "setNewMinterShards",
    values: [PromiseOrValue<string>[]]
  ): string;
  encodeFunctionData(
    functionFragment: "setNexusCommon",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setShardUri",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "totalShardMints",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "transmute",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "uri",
    values: [PromiseOrValue<BigNumberish>]
  ): string;

  decodeFunctionResult(
    functionFragment: "acceptExecutor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "addRecipe", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "allowedShardCaps",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "balanceOf", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "balanceOfBatch",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "burn", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "burnBatch", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "deleteRecipe",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "executor", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "explicitFunctionAccess",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getMintInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getMinterAllowedShardIds",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRecipeInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isApprovedForAll",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "isShardId", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "mintBalances",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "mintBatch", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "nextRecipeId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "nextTokenId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "nexusCommon",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "proposeNewExecutor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "relic", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "safeBatchTransferFrom",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "safeTransferFrom",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setAllowedShardCaps",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setApprovalForAll",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setExplicitAccess",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMinterAllowedShardIds",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setNewMinterShards",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setNexusCommon",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setShardUri",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalShardMints",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "transmute", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "uri", data: BytesLike): Result;

  events: {
    "ApprovalForAll(address,address,bool)": EventFragment;
    "ExplicitAccessSet(address,bytes4,bool)": EventFragment;
    "MinterAllowedShardCapSet(address,uint256,uint256)": EventFragment;
    "MinterAllowedShardIdSet(address,uint256,bool)": EventFragment;
    "NewExecutorAccepted(address,address)": EventFragment;
    "NewExecutorProposed(address,address,address)": EventFragment;
    "NexusCommonSet(address)": EventFragment;
    "RecipeDeleted(uint256)": EventFragment;
    "RecipeSet(uint256,tuple)": EventFragment;
    "ShardUriSet(uint256,string)": EventFragment;
    "TransferBatch(address,address,address,uint256[],uint256[])": EventFragment;
    "TransferSingle(address,address,address,uint256,uint256)": EventFragment;
    "Transmuted(address,uint256)": EventFragment;
    "URI(string,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "ApprovalForAll"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ExplicitAccessSet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "MinterAllowedShardCapSet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "MinterAllowedShardIdSet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NewExecutorAccepted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NewExecutorProposed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NexusCommonSet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RecipeDeleted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RecipeSet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ShardUriSet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TransferBatch"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TransferSingle"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Transmuted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "URI"): EventFragment;
}

export interface ApprovalForAllEventObject {
  account: string;
  operator: string;
  approved: boolean;
}
export type ApprovalForAllEvent = TypedEvent<
  [string, string, boolean],
  ApprovalForAllEventObject
>;

export type ApprovalForAllEventFilter = TypedEventFilter<ApprovalForAllEvent>;

export interface ExplicitAccessSetEventObject {
  account: string;
  fnSelector: string;
  value: boolean;
}
export type ExplicitAccessSetEvent = TypedEvent<
  [string, string, boolean],
  ExplicitAccessSetEventObject
>;

export type ExplicitAccessSetEventFilter =
  TypedEventFilter<ExplicitAccessSetEvent>;

export interface MinterAllowedShardCapSetEventObject {
  minter: string;
  shardId: BigNumber;
  cap: BigNumber;
}
export type MinterAllowedShardCapSetEvent = TypedEvent<
  [string, BigNumber, BigNumber],
  MinterAllowedShardCapSetEventObject
>;

export type MinterAllowedShardCapSetEventFilter =
  TypedEventFilter<MinterAllowedShardCapSetEvent>;

export interface MinterAllowedShardIdSetEventObject {
  partner: string;
  shardId: BigNumber;
  allow: boolean;
}
export type MinterAllowedShardIdSetEvent = TypedEvent<
  [string, BigNumber, boolean],
  MinterAllowedShardIdSetEventObject
>;

export type MinterAllowedShardIdSetEventFilter =
  TypedEventFilter<MinterAllowedShardIdSetEvent>;

export interface NewExecutorAcceptedEventObject {
  oldExecutor: string;
  newExecutor: string;
}
export type NewExecutorAcceptedEvent = TypedEvent<
  [string, string],
  NewExecutorAcceptedEventObject
>;

export type NewExecutorAcceptedEventFilter =
  TypedEventFilter<NewExecutorAcceptedEvent>;

export interface NewExecutorProposedEventObject {
  oldExecutor: string;
  oldProposedExecutor: string;
  newProposedExecutor: string;
}
export type NewExecutorProposedEvent = TypedEvent<
  [string, string, string],
  NewExecutorProposedEventObject
>;

export type NewExecutorProposedEventFilter =
  TypedEventFilter<NewExecutorProposedEvent>;

export interface NexusCommonSetEventObject {
  nexusCommon: string;
}
export type NexusCommonSetEvent = TypedEvent<
  [string],
  NexusCommonSetEventObject
>;

export type NexusCommonSetEventFilter = TypedEventFilter<NexusCommonSetEvent>;

export interface RecipeDeletedEventObject {
  recipeId: BigNumber;
}
export type RecipeDeletedEvent = TypedEvent<
  [BigNumber],
  RecipeDeletedEventObject
>;

export type RecipeDeletedEventFilter = TypedEventFilter<RecipeDeletedEvent>;

export interface RecipeSetEventObject {
  recipeId: BigNumber;
  recipe: IShard.RecipeStructOutput;
}
export type RecipeSetEvent = TypedEvent<
  [BigNumber, IShard.RecipeStructOutput],
  RecipeSetEventObject
>;

export type RecipeSetEventFilter = TypedEventFilter<RecipeSetEvent>;

export interface ShardUriSetEventObject {
  shardId: BigNumber;
  uri: string;
}
export type ShardUriSetEvent = TypedEvent<
  [BigNumber, string],
  ShardUriSetEventObject
>;

export type ShardUriSetEventFilter = TypedEventFilter<ShardUriSetEvent>;

export interface TransferBatchEventObject {
  operator: string;
  from: string;
  to: string;
  ids: BigNumber[];
  values: BigNumber[];
}
export type TransferBatchEvent = TypedEvent<
  [string, string, string, BigNumber[], BigNumber[]],
  TransferBatchEventObject
>;

export type TransferBatchEventFilter = TypedEventFilter<TransferBatchEvent>;

export interface TransferSingleEventObject {
  operator: string;
  from: string;
  to: string;
  id: BigNumber;
  value: BigNumber;
}
export type TransferSingleEvent = TypedEvent<
  [string, string, string, BigNumber, BigNumber],
  TransferSingleEventObject
>;

export type TransferSingleEventFilter = TypedEventFilter<TransferSingleEvent>;

export interface TransmutedEventObject {
  caller: string;
  recipeId: BigNumber;
}
export type TransmutedEvent = TypedEvent<
  [string, BigNumber],
  TransmutedEventObject
>;

export type TransmutedEventFilter = TypedEventFilter<TransmutedEvent>;

export interface URIEventObject {
  value: string;
  id: BigNumber;
}
export type URIEvent = TypedEvent<[string, BigNumber], URIEventObject>;

export type URIEventFilter = TypedEventFilter<URIEvent>;

export interface Shard extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: ShardInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    acceptExecutor(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    addRecipe(
      recipe: IShard.RecipeStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    allowedShardCaps(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    balanceOf(
      account: PromiseOrValue<string>,
      id: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    balanceOfBatch(
      accounts: PromiseOrValue<string>[],
      ids: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<[BigNumber[]]>;

    burn(
      account: PromiseOrValue<string>,
      id: PromiseOrValue<BigNumberish>,
      value: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    burnBatch(
      account: PromiseOrValue<string>,
      ids: PromiseOrValue<BigNumberish>[],
      values: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    deleteRecipe(
      recipeId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    executor(overrides?: CallOverrides): Promise<[string]>;

    explicitFunctionAccess(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    getMintInfo(
      minter: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [IShard.MintInfoStructOutput[]] & { info: IShard.MintInfoStructOutput[] }
    >;

    getMinterAllowedShardIds(
      minter: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber[]]>;

    getRecipeInfo(
      recipeId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [IShard.RecipeStructOutput] & { info: IShard.RecipeStructOutput }
    >;

    isApprovedForAll(
      account: PromiseOrValue<string>,
      operator: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    isShardId(
      id: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    mintBalances(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    mintBatch(
      to: PromiseOrValue<string>,
      shardIds: PromiseOrValue<BigNumberish>[],
      amounts: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    nextRecipeId(overrides?: CallOverrides): Promise<[BigNumber]>;

    nextTokenId(overrides?: CallOverrides): Promise<[BigNumber]>;

    nexusCommon(overrides?: CallOverrides): Promise<[string]>;

    proposeNewExecutor(
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    relic(overrides?: CallOverrides): Promise<[string]>;

    safeBatchTransferFrom(
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      ids: PromiseOrValue<BigNumberish>[],
      amounts: PromiseOrValue<BigNumberish>[],
      data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    safeTransferFrom(
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      id: PromiseOrValue<BigNumberish>,
      amount: PromiseOrValue<BigNumberish>,
      data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setAllowedShardCaps(
      minter: PromiseOrValue<string>,
      shardIds: PromiseOrValue<BigNumberish>[],
      caps: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setApprovalForAll(
      operator: PromiseOrValue<string>,
      approved: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setExplicitAccess(
      allowedCaller: PromiseOrValue<string>,
      access: IElevatedAccess.ExplicitAccessStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setMinterAllowedShardIds(
      minter: PromiseOrValue<string>,
      shardIds: PromiseOrValue<BigNumberish>[],
      allow: PromiseOrValue<boolean>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setNewMinterShards(
      minters: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setNexusCommon(
      _contract: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setShardUri(
      shardId: PromiseOrValue<BigNumberish>,
      _uri: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    supportsInterface(
      interfaceId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    totalShardMints(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    transmute(
      recipeId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    uri(
      shardId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string]>;
  };

  acceptExecutor(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  addRecipe(
    recipe: IShard.RecipeStruct,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  allowedShardCaps(
    arg0: PromiseOrValue<string>,
    arg1: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  balanceOf(
    account: PromiseOrValue<string>,
    id: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  balanceOfBatch(
    accounts: PromiseOrValue<string>[],
    ids: PromiseOrValue<BigNumberish>[],
    overrides?: CallOverrides
  ): Promise<BigNumber[]>;

  burn(
    account: PromiseOrValue<string>,
    id: PromiseOrValue<BigNumberish>,
    value: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  burnBatch(
    account: PromiseOrValue<string>,
    ids: PromiseOrValue<BigNumberish>[],
    values: PromiseOrValue<BigNumberish>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  deleteRecipe(
    recipeId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  executor(overrides?: CallOverrides): Promise<string>;

  explicitFunctionAccess(
    arg0: PromiseOrValue<string>,
    arg1: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  getMintInfo(
    minter: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<IShard.MintInfoStructOutput[]>;

  getMinterAllowedShardIds(
    minter: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber[]>;

  getRecipeInfo(
    recipeId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<IShard.RecipeStructOutput>;

  isApprovedForAll(
    account: PromiseOrValue<string>,
    operator: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  isShardId(
    id: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  mintBalances(
    arg0: PromiseOrValue<string>,
    arg1: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  mintBatch(
    to: PromiseOrValue<string>,
    shardIds: PromiseOrValue<BigNumberish>[],
    amounts: PromiseOrValue<BigNumberish>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  nextRecipeId(overrides?: CallOverrides): Promise<BigNumber>;

  nextTokenId(overrides?: CallOverrides): Promise<BigNumber>;

  nexusCommon(overrides?: CallOverrides): Promise<string>;

  proposeNewExecutor(
    account: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  relic(overrides?: CallOverrides): Promise<string>;

  safeBatchTransferFrom(
    from: PromiseOrValue<string>,
    to: PromiseOrValue<string>,
    ids: PromiseOrValue<BigNumberish>[],
    amounts: PromiseOrValue<BigNumberish>[],
    data: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  safeTransferFrom(
    from: PromiseOrValue<string>,
    to: PromiseOrValue<string>,
    id: PromiseOrValue<BigNumberish>,
    amount: PromiseOrValue<BigNumberish>,
    data: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setAllowedShardCaps(
    minter: PromiseOrValue<string>,
    shardIds: PromiseOrValue<BigNumberish>[],
    caps: PromiseOrValue<BigNumberish>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setApprovalForAll(
    operator: PromiseOrValue<string>,
    approved: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setExplicitAccess(
    allowedCaller: PromiseOrValue<string>,
    access: IElevatedAccess.ExplicitAccessStruct[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setMinterAllowedShardIds(
    minter: PromiseOrValue<string>,
    shardIds: PromiseOrValue<BigNumberish>[],
    allow: PromiseOrValue<boolean>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setNewMinterShards(
    minters: PromiseOrValue<string>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setNexusCommon(
    _contract: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setShardUri(
    shardId: PromiseOrValue<BigNumberish>,
    _uri: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  supportsInterface(
    interfaceId: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  totalShardMints(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  transmute(
    recipeId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  uri(
    shardId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  callStatic: {
    acceptExecutor(overrides?: CallOverrides): Promise<void>;

    addRecipe(
      recipe: IShard.RecipeStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    allowedShardCaps(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    balanceOf(
      account: PromiseOrValue<string>,
      id: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    balanceOfBatch(
      accounts: PromiseOrValue<string>[],
      ids: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    burn(
      account: PromiseOrValue<string>,
      id: PromiseOrValue<BigNumberish>,
      value: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    burnBatch(
      account: PromiseOrValue<string>,
      ids: PromiseOrValue<BigNumberish>[],
      values: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<void>;

    deleteRecipe(
      recipeId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    executor(overrides?: CallOverrides): Promise<string>;

    explicitFunctionAccess(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    getMintInfo(
      minter: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<IShard.MintInfoStructOutput[]>;

    getMinterAllowedShardIds(
      minter: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    getRecipeInfo(
      recipeId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<IShard.RecipeStructOutput>;

    isApprovedForAll(
      account: PromiseOrValue<string>,
      operator: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isShardId(
      id: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    mintBalances(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    mintBatch(
      to: PromiseOrValue<string>,
      shardIds: PromiseOrValue<BigNumberish>[],
      amounts: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<void>;

    nextRecipeId(overrides?: CallOverrides): Promise<BigNumber>;

    nextTokenId(overrides?: CallOverrides): Promise<BigNumber>;

    nexusCommon(overrides?: CallOverrides): Promise<string>;

    proposeNewExecutor(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    relic(overrides?: CallOverrides): Promise<string>;

    safeBatchTransferFrom(
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      ids: PromiseOrValue<BigNumberish>[],
      amounts: PromiseOrValue<BigNumberish>[],
      data: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    safeTransferFrom(
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      id: PromiseOrValue<BigNumberish>,
      amount: PromiseOrValue<BigNumberish>,
      data: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    setAllowedShardCaps(
      minter: PromiseOrValue<string>,
      shardIds: PromiseOrValue<BigNumberish>[],
      caps: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<void>;

    setApprovalForAll(
      operator: PromiseOrValue<string>,
      approved: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<void>;

    setExplicitAccess(
      allowedCaller: PromiseOrValue<string>,
      access: IElevatedAccess.ExplicitAccessStruct[],
      overrides?: CallOverrides
    ): Promise<void>;

    setMinterAllowedShardIds(
      minter: PromiseOrValue<string>,
      shardIds: PromiseOrValue<BigNumberish>[],
      allow: PromiseOrValue<boolean>[],
      overrides?: CallOverrides
    ): Promise<void>;

    setNewMinterShards(
      minters: PromiseOrValue<string>[],
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    setNexusCommon(
      _contract: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setShardUri(
      shardId: PromiseOrValue<BigNumberish>,
      _uri: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    supportsInterface(
      interfaceId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    totalShardMints(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    transmute(
      recipeId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    uri(
      shardId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;
  };

  filters: {
    "ApprovalForAll(address,address,bool)"(
      account?: PromiseOrValue<string> | null,
      operator?: PromiseOrValue<string> | null,
      approved?: null
    ): ApprovalForAllEventFilter;
    ApprovalForAll(
      account?: PromiseOrValue<string> | null,
      operator?: PromiseOrValue<string> | null,
      approved?: null
    ): ApprovalForAllEventFilter;

    "ExplicitAccessSet(address,bytes4,bool)"(
      account?: PromiseOrValue<string> | null,
      fnSelector?: PromiseOrValue<BytesLike> | null,
      value?: PromiseOrValue<boolean> | null
    ): ExplicitAccessSetEventFilter;
    ExplicitAccessSet(
      account?: PromiseOrValue<string> | null,
      fnSelector?: PromiseOrValue<BytesLike> | null,
      value?: PromiseOrValue<boolean> | null
    ): ExplicitAccessSetEventFilter;

    "MinterAllowedShardCapSet(address,uint256,uint256)"(
      minter?: PromiseOrValue<string> | null,
      shardId?: PromiseOrValue<BigNumberish> | null,
      cap?: null
    ): MinterAllowedShardCapSetEventFilter;
    MinterAllowedShardCapSet(
      minter?: PromiseOrValue<string> | null,
      shardId?: PromiseOrValue<BigNumberish> | null,
      cap?: null
    ): MinterAllowedShardCapSetEventFilter;

    "MinterAllowedShardIdSet(address,uint256,bool)"(
      partner?: PromiseOrValue<string> | null,
      shardId?: PromiseOrValue<BigNumberish> | null,
      allow?: null
    ): MinterAllowedShardIdSetEventFilter;
    MinterAllowedShardIdSet(
      partner?: PromiseOrValue<string> | null,
      shardId?: PromiseOrValue<BigNumberish> | null,
      allow?: null
    ): MinterAllowedShardIdSetEventFilter;

    "NewExecutorAccepted(address,address)"(
      oldExecutor?: PromiseOrValue<string> | null,
      newExecutor?: PromiseOrValue<string> | null
    ): NewExecutorAcceptedEventFilter;
    NewExecutorAccepted(
      oldExecutor?: PromiseOrValue<string> | null,
      newExecutor?: PromiseOrValue<string> | null
    ): NewExecutorAcceptedEventFilter;

    "NewExecutorProposed(address,address,address)"(
      oldExecutor?: PromiseOrValue<string> | null,
      oldProposedExecutor?: PromiseOrValue<string> | null,
      newProposedExecutor?: PromiseOrValue<string> | null
    ): NewExecutorProposedEventFilter;
    NewExecutorProposed(
      oldExecutor?: PromiseOrValue<string> | null,
      oldProposedExecutor?: PromiseOrValue<string> | null,
      newProposedExecutor?: PromiseOrValue<string> | null
    ): NewExecutorProposedEventFilter;

    "NexusCommonSet(address)"(nexusCommon?: null): NexusCommonSetEventFilter;
    NexusCommonSet(nexusCommon?: null): NexusCommonSetEventFilter;

    "RecipeDeleted(uint256)"(recipeId?: null): RecipeDeletedEventFilter;
    RecipeDeleted(recipeId?: null): RecipeDeletedEventFilter;

    "RecipeSet(uint256,tuple)"(
      recipeId?: null,
      recipe?: null
    ): RecipeSetEventFilter;
    RecipeSet(recipeId?: null, recipe?: null): RecipeSetEventFilter;

    "ShardUriSet(uint256,string)"(
      shardId?: PromiseOrValue<BigNumberish> | null,
      uri?: null
    ): ShardUriSetEventFilter;
    ShardUriSet(
      shardId?: PromiseOrValue<BigNumberish> | null,
      uri?: null
    ): ShardUriSetEventFilter;

    "TransferBatch(address,address,address,uint256[],uint256[])"(
      operator?: PromiseOrValue<string> | null,
      from?: PromiseOrValue<string> | null,
      to?: PromiseOrValue<string> | null,
      ids?: null,
      values?: null
    ): TransferBatchEventFilter;
    TransferBatch(
      operator?: PromiseOrValue<string> | null,
      from?: PromiseOrValue<string> | null,
      to?: PromiseOrValue<string> | null,
      ids?: null,
      values?: null
    ): TransferBatchEventFilter;

    "TransferSingle(address,address,address,uint256,uint256)"(
      operator?: PromiseOrValue<string> | null,
      from?: PromiseOrValue<string> | null,
      to?: PromiseOrValue<string> | null,
      id?: null,
      value?: null
    ): TransferSingleEventFilter;
    TransferSingle(
      operator?: PromiseOrValue<string> | null,
      from?: PromiseOrValue<string> | null,
      to?: PromiseOrValue<string> | null,
      id?: null,
      value?: null
    ): TransferSingleEventFilter;

    "Transmuted(address,uint256)"(
      caller?: PromiseOrValue<string> | null,
      recipeId?: null
    ): TransmutedEventFilter;
    Transmuted(
      caller?: PromiseOrValue<string> | null,
      recipeId?: null
    ): TransmutedEventFilter;

    "URI(string,uint256)"(
      value?: null,
      id?: PromiseOrValue<BigNumberish> | null
    ): URIEventFilter;
    URI(value?: null, id?: PromiseOrValue<BigNumberish> | null): URIEventFilter;
  };

  estimateGas: {
    acceptExecutor(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    addRecipe(
      recipe: IShard.RecipeStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    allowedShardCaps(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    balanceOf(
      account: PromiseOrValue<string>,
      id: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    balanceOfBatch(
      accounts: PromiseOrValue<string>[],
      ids: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    burn(
      account: PromiseOrValue<string>,
      id: PromiseOrValue<BigNumberish>,
      value: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    burnBatch(
      account: PromiseOrValue<string>,
      ids: PromiseOrValue<BigNumberish>[],
      values: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    deleteRecipe(
      recipeId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    executor(overrides?: CallOverrides): Promise<BigNumber>;

    explicitFunctionAccess(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getMintInfo(
      minter: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getMinterAllowedShardIds(
      minter: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRecipeInfo(
      recipeId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isApprovedForAll(
      account: PromiseOrValue<string>,
      operator: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isShardId(
      id: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    mintBalances(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    mintBatch(
      to: PromiseOrValue<string>,
      shardIds: PromiseOrValue<BigNumberish>[],
      amounts: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    nextRecipeId(overrides?: CallOverrides): Promise<BigNumber>;

    nextTokenId(overrides?: CallOverrides): Promise<BigNumber>;

    nexusCommon(overrides?: CallOverrides): Promise<BigNumber>;

    proposeNewExecutor(
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    relic(overrides?: CallOverrides): Promise<BigNumber>;

    safeBatchTransferFrom(
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      ids: PromiseOrValue<BigNumberish>[],
      amounts: PromiseOrValue<BigNumberish>[],
      data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    safeTransferFrom(
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      id: PromiseOrValue<BigNumberish>,
      amount: PromiseOrValue<BigNumberish>,
      data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setAllowedShardCaps(
      minter: PromiseOrValue<string>,
      shardIds: PromiseOrValue<BigNumberish>[],
      caps: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setApprovalForAll(
      operator: PromiseOrValue<string>,
      approved: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setExplicitAccess(
      allowedCaller: PromiseOrValue<string>,
      access: IElevatedAccess.ExplicitAccessStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setMinterAllowedShardIds(
      minter: PromiseOrValue<string>,
      shardIds: PromiseOrValue<BigNumberish>[],
      allow: PromiseOrValue<boolean>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setNewMinterShards(
      minters: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setNexusCommon(
      _contract: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setShardUri(
      shardId: PromiseOrValue<BigNumberish>,
      _uri: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    supportsInterface(
      interfaceId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    totalShardMints(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    transmute(
      recipeId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    uri(
      shardId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    acceptExecutor(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    addRecipe(
      recipe: IShard.RecipeStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    allowedShardCaps(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    balanceOf(
      account: PromiseOrValue<string>,
      id: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    balanceOfBatch(
      accounts: PromiseOrValue<string>[],
      ids: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    burn(
      account: PromiseOrValue<string>,
      id: PromiseOrValue<BigNumberish>,
      value: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    burnBatch(
      account: PromiseOrValue<string>,
      ids: PromiseOrValue<BigNumberish>[],
      values: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    deleteRecipe(
      recipeId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    executor(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    explicitFunctionAccess(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getMintInfo(
      minter: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getMinterAllowedShardIds(
      minter: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getRecipeInfo(
      recipeId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isApprovedForAll(
      account: PromiseOrValue<string>,
      operator: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isShardId(
      id: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    mintBalances(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    mintBatch(
      to: PromiseOrValue<string>,
      shardIds: PromiseOrValue<BigNumberish>[],
      amounts: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    nextRecipeId(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    nextTokenId(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    nexusCommon(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    proposeNewExecutor(
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    relic(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    safeBatchTransferFrom(
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      ids: PromiseOrValue<BigNumberish>[],
      amounts: PromiseOrValue<BigNumberish>[],
      data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    safeTransferFrom(
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      id: PromiseOrValue<BigNumberish>,
      amount: PromiseOrValue<BigNumberish>,
      data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setAllowedShardCaps(
      minter: PromiseOrValue<string>,
      shardIds: PromiseOrValue<BigNumberish>[],
      caps: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setApprovalForAll(
      operator: PromiseOrValue<string>,
      approved: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setExplicitAccess(
      allowedCaller: PromiseOrValue<string>,
      access: IElevatedAccess.ExplicitAccessStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setMinterAllowedShardIds(
      minter: PromiseOrValue<string>,
      shardIds: PromiseOrValue<BigNumberish>[],
      allow: PromiseOrValue<boolean>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setNewMinterShards(
      minters: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setNexusCommon(
      _contract: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setShardUri(
      shardId: PromiseOrValue<BigNumberish>,
      _uri: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    supportsInterface(
      interfaceId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    totalShardMints(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    transmute(
      recipeId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    uri(
      shardId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
