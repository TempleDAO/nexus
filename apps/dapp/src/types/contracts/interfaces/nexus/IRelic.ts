/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../../common";

export declare namespace IRelic {
  export type RelicInfoViewStruct = {
    enclaveId: PromiseOrValue<BigNumberish>;
    rarity: PromiseOrValue<BigNumberish>;
    xp: PromiseOrValue<BigNumberish>;
    shards: PromiseOrValue<BigNumberish>[];
  };

  export type RelicInfoViewStructOutput = [
    BigNumber,
    number,
    BigNumber,
    BigNumber[]
  ] & {
    enclaveId: BigNumber;
    rarity: number;
    xp: BigNumber;
    shards: BigNumber[];
  };
}

export interface IRelicInterface extends utils.Interface {
  functions: {
    "approve(address,uint256)": FunctionFragment;
    "balanceOf(address)": FunctionFragment;
    "batchEquipShards(uint256,uint256[],uint256[])": FunctionFragment;
    "batchUnequipShards(uint256,uint256[],uint256[])": FunctionFragment;
    "blacklistedAccounts(address)": FunctionFragment;
    "blacklistedRelicShards(uint256,uint256)": FunctionFragment;
    "blacklistedShardsCount(uint256)": FunctionFragment;
    "burnBlacklistedRelicShards(address,uint256,uint256[],uint256[])": FunctionFragment;
    "checkpointRelicRarity(uint256)": FunctionFragment;
    "getApproved(uint256)": FunctionFragment;
    "getEquippedShardIds(uint256)": FunctionFragment;
    "getEquippedShards(uint256,uint256[])": FunctionFragment;
    "getRarityBaseUri(uint8)": FunctionFragment;
    "getRelicInfo(uint256)": FunctionFragment;
    "getRelicMinterEnclaveIds(address)": FunctionFragment;
    "isApprovedForAll(address,address)": FunctionFragment;
    "isRelicMinter(address,uint256)": FunctionFragment;
    "mintRelic(address,uint256)": FunctionFragment;
    "name()": FunctionFragment;
    "nextTokenId()": FunctionFragment;
    "ownerOf(uint256)": FunctionFragment;
    "rarityXPThresholds(uint8)": FunctionFragment;
    "recoverToken(address,address,uint256)": FunctionFragment;
    "relicsOfOwner(address)": FunctionFragment;
    "safeTransferFrom(address,address,uint256)": FunctionFragment;
    "safeTransferFrom(address,address,uint256,bytes)": FunctionFragment;
    "setApprovalForAll(address,bool)": FunctionFragment;
    "setBaseUriRarity(uint8,string)": FunctionFragment;
    "setBlacklistAccount(address,uint256,bool)": FunctionFragment;
    "setBlacklistedShards(address,uint256,uint256[],uint256[])": FunctionFragment;
    "setNexusCommon(address)": FunctionFragment;
    "setRelicMinterEnclaveIds(address,uint256[],bool[])": FunctionFragment;
    "setRelicXP(uint256,uint256)": FunctionFragment;
    "setShard(address)": FunctionFragment;
    "setXPRarityThresholds(uint8[],uint256[])": FunctionFragment;
    "supportsInterface(bytes4)": FunctionFragment;
    "symbol()": FunctionFragment;
    "tokenURI(uint256)": FunctionFragment;
    "totalMinted()": FunctionFragment;
    "totalSupply()": FunctionFragment;
    "transferFrom(address,address,uint256)": FunctionFragment;
    "unsetBlacklistedShards(address,uint256,uint256[],uint256[])": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "approve"
      | "balanceOf"
      | "batchEquipShards"
      | "batchUnequipShards"
      | "blacklistedAccounts"
      | "blacklistedRelicShards"
      | "blacklistedShardsCount"
      | "burnBlacklistedRelicShards"
      | "checkpointRelicRarity"
      | "getApproved"
      | "getEquippedShardIds"
      | "getEquippedShards"
      | "getRarityBaseUri"
      | "getRelicInfo"
      | "getRelicMinterEnclaveIds"
      | "isApprovedForAll"
      | "isRelicMinter"
      | "mintRelic"
      | "name"
      | "nextTokenId"
      | "ownerOf"
      | "rarityXPThresholds"
      | "recoverToken"
      | "relicsOfOwner"
      | "safeTransferFrom(address,address,uint256)"
      | "safeTransferFrom(address,address,uint256,bytes)"
      | "setApprovalForAll"
      | "setBaseUriRarity"
      | "setBlacklistAccount"
      | "setBlacklistedShards"
      | "setNexusCommon"
      | "setRelicMinterEnclaveIds"
      | "setRelicXP"
      | "setShard"
      | "setXPRarityThresholds"
      | "supportsInterface"
      | "symbol"
      | "tokenURI"
      | "totalMinted"
      | "totalSupply"
      | "transferFrom"
      | "unsetBlacklistedShards"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "approve",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "balanceOf",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "batchEquipShards",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>[],
      PromiseOrValue<BigNumberish>[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "batchUnequipShards",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>[],
      PromiseOrValue<BigNumberish>[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "blacklistedAccounts",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "blacklistedRelicShards",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "blacklistedShardsCount",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "burnBlacklistedRelicShards",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>[],
      PromiseOrValue<BigNumberish>[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "checkpointRelicRarity",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getApproved",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getEquippedShardIds",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getEquippedShards",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>[]]
  ): string;
  encodeFunctionData(
    functionFragment: "getRarityBaseUri",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getRelicInfo",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getRelicMinterEnclaveIds",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "isApprovedForAll",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "isRelicMinter",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "mintRelic",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(functionFragment: "name", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "nextTokenId",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "ownerOf",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "rarityXPThresholds",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "recoverToken",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "relicsOfOwner",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "safeTransferFrom(address,address,uint256)",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "safeTransferFrom(address,address,uint256,bytes)",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "setApprovalForAll",
    values: [PromiseOrValue<string>, PromiseOrValue<boolean>]
  ): string;
  encodeFunctionData(
    functionFragment: "setBaseUriRarity",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setBlacklistAccount",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<boolean>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "setBlacklistedShards",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>[],
      PromiseOrValue<BigNumberish>[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "setNexusCommon",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setRelicMinterEnclaveIds",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>[],
      PromiseOrValue<boolean>[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "setRelicXP",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setShard",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setXPRarityThresholds",
    values: [PromiseOrValue<BigNumberish>[], PromiseOrValue<BigNumberish>[]]
  ): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(functionFragment: "symbol", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "tokenURI",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "totalMinted",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalSupply",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferFrom",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "unsetBlacklistedShards",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>[],
      PromiseOrValue<BigNumberish>[]
    ]
  ): string;

  decodeFunctionResult(functionFragment: "approve", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "balanceOf", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "batchEquipShards",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "batchUnequipShards",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "blacklistedAccounts",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "blacklistedRelicShards",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "blacklistedShardsCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "burnBlacklistedRelicShards",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "checkpointRelicRarity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getApproved",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getEquippedShardIds",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getEquippedShards",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRarityBaseUri",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRelicInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRelicMinterEnclaveIds",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isApprovedForAll",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isRelicMinter",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "mintRelic", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "name", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "nextTokenId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "ownerOf", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "rarityXPThresholds",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "recoverToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "relicsOfOwner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "safeTransferFrom(address,address,uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "safeTransferFrom(address,address,uint256,bytes)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setApprovalForAll",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setBaseUriRarity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setBlacklistAccount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setBlacklistedShards",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setNexusCommon",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setRelicMinterEnclaveIds",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setRelicXP", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setShard", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setXPRarityThresholds",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "symbol", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "tokenURI", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "totalMinted",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalSupply",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferFrom",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "unsetBlacklistedShards",
    data: BytesLike
  ): Result;

  events: {
    "AccountBlacklistSet(address,bool,uint256[],uint256[])": EventFragment;
    "AccountBlacklisted(address,bool)": EventFragment;
    "Approval(address,address,uint256)": EventFragment;
    "ApprovalForAll(address,address,bool)": EventFragment;
    "ConsecutiveTransfer(uint256,uint256,address,address)": EventFragment;
    "EnclaveNameSet(uint256,string)": EventFragment;
    "NexusCommonSet(address)": EventFragment;
    "RarityBaseUriSet(uint8,string)": EventFragment;
    "RarityXPThresholdSet(uint8,uint256)": EventFragment;
    "RelicMinted(address,uint256,uint256)": EventFragment;
    "RelicMinterEnclaveSet(address,uint256,bool)": EventFragment;
    "RelicXPSet(uint256,uint256)": EventFragment;
    "ShardBlacklistUpdated(uint256,uint256,uint256)": EventFragment;
    "ShardSet(address)": EventFragment;
    "ShardsEquipped(address,uint256,uint256[],uint256[])": EventFragment;
    "ShardsUnequipped(address,uint256,uint256[],uint256[])": EventFragment;
    "Transfer(address,address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AccountBlacklistSet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "AccountBlacklisted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Approval"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ApprovalForAll"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ConsecutiveTransfer"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "EnclaveNameSet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NexusCommonSet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RarityBaseUriSet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RarityXPThresholdSet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RelicMinted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RelicMinterEnclaveSet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RelicXPSet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ShardBlacklistUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ShardSet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ShardsEquipped"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ShardsUnequipped"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Transfer"): EventFragment;
}

export interface AccountBlacklistSetEventObject {
  account: string;
  blacklist: boolean;
  shardIds: BigNumber[];
  amounts: BigNumber[];
}
export type AccountBlacklistSetEvent = TypedEvent<
  [string, boolean, BigNumber[], BigNumber[]],
  AccountBlacklistSetEventObject
>;

export type AccountBlacklistSetEventFilter =
  TypedEventFilter<AccountBlacklistSetEvent>;

export interface AccountBlacklistedEventObject {
  account: string;
  blacklist: boolean;
}
export type AccountBlacklistedEvent = TypedEvent<
  [string, boolean],
  AccountBlacklistedEventObject
>;

export type AccountBlacklistedEventFilter =
  TypedEventFilter<AccountBlacklistedEvent>;

export interface ApprovalEventObject {
  owner: string;
  approved: string;
  tokenId: BigNumber;
}
export type ApprovalEvent = TypedEvent<
  [string, string, BigNumber],
  ApprovalEventObject
>;

export type ApprovalEventFilter = TypedEventFilter<ApprovalEvent>;

export interface ApprovalForAllEventObject {
  owner: string;
  operator: string;
  approved: boolean;
}
export type ApprovalForAllEvent = TypedEvent<
  [string, string, boolean],
  ApprovalForAllEventObject
>;

export type ApprovalForAllEventFilter = TypedEventFilter<ApprovalForAllEvent>;

export interface ConsecutiveTransferEventObject {
  fromTokenId: BigNumber;
  toTokenId: BigNumber;
  from: string;
  to: string;
}
export type ConsecutiveTransferEvent = TypedEvent<
  [BigNumber, BigNumber, string, string],
  ConsecutiveTransferEventObject
>;

export type ConsecutiveTransferEventFilter =
  TypedEventFilter<ConsecutiveTransferEvent>;

export interface EnclaveNameSetEventObject {
  id: BigNumber;
  name: string;
}
export type EnclaveNameSetEvent = TypedEvent<
  [BigNumber, string],
  EnclaveNameSetEventObject
>;

export type EnclaveNameSetEventFilter = TypedEventFilter<EnclaveNameSetEvent>;

export interface NexusCommonSetEventObject {
  nexusCommon: string;
}
export type NexusCommonSetEvent = TypedEvent<
  [string],
  NexusCommonSetEventObject
>;

export type NexusCommonSetEventFilter = TypedEventFilter<NexusCommonSetEvent>;

export interface RarityBaseUriSetEventObject {
  rarity: number;
  uri: string;
}
export type RarityBaseUriSetEvent = TypedEvent<
  [number, string],
  RarityBaseUriSetEventObject
>;

export type RarityBaseUriSetEventFilter =
  TypedEventFilter<RarityBaseUriSetEvent>;

export interface RarityXPThresholdSetEventObject {
  rarity: number;
  threshold: BigNumber;
}
export type RarityXPThresholdSetEvent = TypedEvent<
  [number, BigNumber],
  RarityXPThresholdSetEventObject
>;

export type RarityXPThresholdSetEventFilter =
  TypedEventFilter<RarityXPThresholdSetEvent>;

export interface RelicMintedEventObject {
  to: string;
  relicId: BigNumber;
  enclaveId: BigNumber;
}
export type RelicMintedEvent = TypedEvent<
  [string, BigNumber, BigNumber],
  RelicMintedEventObject
>;

export type RelicMintedEventFilter = TypedEventFilter<RelicMintedEvent>;

export interface RelicMinterEnclaveSetEventObject {
  minter: string;
  enclaveId: BigNumber;
  allowed: boolean;
}
export type RelicMinterEnclaveSetEvent = TypedEvent<
  [string, BigNumber, boolean],
  RelicMinterEnclaveSetEventObject
>;

export type RelicMinterEnclaveSetEventFilter =
  TypedEventFilter<RelicMinterEnclaveSetEvent>;

export interface RelicXPSetEventObject {
  relicId: BigNumber;
  xp: BigNumber;
}
export type RelicXPSetEvent = TypedEvent<
  [BigNumber, BigNumber],
  RelicXPSetEventObject
>;

export type RelicXPSetEventFilter = TypedEventFilter<RelicXPSetEvent>;

export interface ShardBlacklistUpdatedEventObject {
  relicId: BigNumber;
  shardId: BigNumber;
  amount: BigNumber;
}
export type ShardBlacklistUpdatedEvent = TypedEvent<
  [BigNumber, BigNumber, BigNumber],
  ShardBlacklistUpdatedEventObject
>;

export type ShardBlacklistUpdatedEventFilter =
  TypedEventFilter<ShardBlacklistUpdatedEvent>;

export interface ShardSetEventObject {
  shard: string;
}
export type ShardSetEvent = TypedEvent<[string], ShardSetEventObject>;

export type ShardSetEventFilter = TypedEventFilter<ShardSetEvent>;

export interface ShardsEquippedEventObject {
  caller: string;
  relicId: BigNumber;
  shardIds: BigNumber[];
  amounts: BigNumber[];
}
export type ShardsEquippedEvent = TypedEvent<
  [string, BigNumber, BigNumber[], BigNumber[]],
  ShardsEquippedEventObject
>;

export type ShardsEquippedEventFilter = TypedEventFilter<ShardsEquippedEvent>;

export interface ShardsUnequippedEventObject {
  recipient: string;
  relicId: BigNumber;
  shardIds: BigNumber[];
  amounts: BigNumber[];
}
export type ShardsUnequippedEvent = TypedEvent<
  [string, BigNumber, BigNumber[], BigNumber[]],
  ShardsUnequippedEventObject
>;

export type ShardsUnequippedEventFilter =
  TypedEventFilter<ShardsUnequippedEvent>;

export interface TransferEventObject {
  from: string;
  to: string;
  tokenId: BigNumber;
}
export type TransferEvent = TypedEvent<
  [string, string, BigNumber],
  TransferEventObject
>;

export type TransferEventFilter = TypedEventFilter<TransferEvent>;

export interface IRelic extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IRelicInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    approve(
      to: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    balanceOf(
      owner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { balance: BigNumber }>;

    batchEquipShards(
      relicId: PromiseOrValue<BigNumberish>,
      shardIds: PromiseOrValue<BigNumberish>[],
      amounts: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    batchUnequipShards(
      relicId: PromiseOrValue<BigNumberish>,
      shardIds: PromiseOrValue<BigNumberish>[],
      amounts: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    blacklistedAccounts(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    blacklistedRelicShards(
      relicId: PromiseOrValue<BigNumberish>,
      shardId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    blacklistedShardsCount(
      relicId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    burnBlacklistedRelicShards(
      account: PromiseOrValue<string>,
      relicId: PromiseOrValue<BigNumberish>,
      shardIds: PromiseOrValue<BigNumberish>[],
      amounts: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    checkpointRelicRarity(
      relicId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    getApproved(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string] & { operator: string }>;

    getEquippedShardIds(
      relicId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber[]]>;

    getEquippedShards(
      relicId: PromiseOrValue<BigNumberish>,
      shardIds: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<[BigNumber[]] & { balances: BigNumber[] }>;

    getRarityBaseUri(
      rarity: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string] & { uri: string }>;

    getRelicInfo(
      relicId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [IRelic.RelicInfoViewStructOutput] & {
        info: IRelic.RelicInfoViewStructOutput;
      }
    >;

    getRelicMinterEnclaveIds(
      minter: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber[]]>;

    isApprovedForAll(
      owner: PromiseOrValue<string>,
      operator: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    isRelicMinter(
      minter: PromiseOrValue<string>,
      enclaveId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    mintRelic(
      to: PromiseOrValue<string>,
      enclaveId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    name(overrides?: CallOverrides): Promise<[string]>;

    nextTokenId(overrides?: CallOverrides): Promise<[BigNumber]>;

    ownerOf(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string] & { owner: string }>;

    rarityXPThresholds(
      rarity: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    recoverToken(
      token: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    relicsOfOwner(
      _owner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber[]] & { ownerRelics: BigNumber[] }>;

    "safeTransferFrom(address,address,uint256)"(
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "safeTransferFrom(address,address,uint256,bytes)"(
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      data: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setApprovalForAll(
      operator: PromiseOrValue<string>,
      _approved: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setBaseUriRarity(
      rarity: PromiseOrValue<BigNumberish>,
      uri: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setBlacklistAccount(
      account: PromiseOrValue<string>,
      relicId: PromiseOrValue<BigNumberish>,
      blacklist: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setBlacklistedShards(
      account: PromiseOrValue<string>,
      relicId: PromiseOrValue<BigNumberish>,
      shardIds: PromiseOrValue<BigNumberish>[],
      amounts: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setNexusCommon(
      _contract: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setRelicMinterEnclaveIds(
      minter: PromiseOrValue<string>,
      enclaveIds: PromiseOrValue<BigNumberish>[],
      allow: PromiseOrValue<boolean>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setRelicXP(
      relicId: PromiseOrValue<BigNumberish>,
      xp: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setShard(
      _shard: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setXPRarityThresholds(
      rarities: PromiseOrValue<BigNumberish>[],
      thresholds: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    supportsInterface(
      interfaceId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    symbol(overrides?: CallOverrides): Promise<[string]>;

    tokenURI(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    totalMinted(overrides?: CallOverrides): Promise<[BigNumber]>;

    totalSupply(overrides?: CallOverrides): Promise<[BigNumber]>;

    transferFrom(
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    unsetBlacklistedShards(
      account: PromiseOrValue<string>,
      relicId: PromiseOrValue<BigNumberish>,
      shardIds: PromiseOrValue<BigNumberish>[],
      amounts: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  approve(
    to: PromiseOrValue<string>,
    tokenId: PromiseOrValue<BigNumberish>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  balanceOf(
    owner: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  batchEquipShards(
    relicId: PromiseOrValue<BigNumberish>,
    shardIds: PromiseOrValue<BigNumberish>[],
    amounts: PromiseOrValue<BigNumberish>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  batchUnequipShards(
    relicId: PromiseOrValue<BigNumberish>,
    shardIds: PromiseOrValue<BigNumberish>[],
    amounts: PromiseOrValue<BigNumberish>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  blacklistedAccounts(
    account: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  blacklistedRelicShards(
    relicId: PromiseOrValue<BigNumberish>,
    shardId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  blacklistedShardsCount(
    relicId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  burnBlacklistedRelicShards(
    account: PromiseOrValue<string>,
    relicId: PromiseOrValue<BigNumberish>,
    shardIds: PromiseOrValue<BigNumberish>[],
    amounts: PromiseOrValue<BigNumberish>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  checkpointRelicRarity(
    relicId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  getApproved(
    tokenId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  getEquippedShardIds(
    relicId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber[]>;

  getEquippedShards(
    relicId: PromiseOrValue<BigNumberish>,
    shardIds: PromiseOrValue<BigNumberish>[],
    overrides?: CallOverrides
  ): Promise<BigNumber[]>;

  getRarityBaseUri(
    rarity: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  getRelicInfo(
    relicId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<IRelic.RelicInfoViewStructOutput>;

  getRelicMinterEnclaveIds(
    minter: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber[]>;

  isApprovedForAll(
    owner: PromiseOrValue<string>,
    operator: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  isRelicMinter(
    minter: PromiseOrValue<string>,
    enclaveId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  mintRelic(
    to: PromiseOrValue<string>,
    enclaveId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  name(overrides?: CallOverrides): Promise<string>;

  nextTokenId(overrides?: CallOverrides): Promise<BigNumber>;

  ownerOf(
    tokenId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  rarityXPThresholds(
    rarity: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  recoverToken(
    token: PromiseOrValue<string>,
    to: PromiseOrValue<string>,
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  relicsOfOwner(
    _owner: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber[]>;

  "safeTransferFrom(address,address,uint256)"(
    from: PromiseOrValue<string>,
    to: PromiseOrValue<string>,
    tokenId: PromiseOrValue<BigNumberish>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "safeTransferFrom(address,address,uint256,bytes)"(
    from: PromiseOrValue<string>,
    to: PromiseOrValue<string>,
    tokenId: PromiseOrValue<BigNumberish>,
    data: PromiseOrValue<BytesLike>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setApprovalForAll(
    operator: PromiseOrValue<string>,
    _approved: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setBaseUriRarity(
    rarity: PromiseOrValue<BigNumberish>,
    uri: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setBlacklistAccount(
    account: PromiseOrValue<string>,
    relicId: PromiseOrValue<BigNumberish>,
    blacklist: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setBlacklistedShards(
    account: PromiseOrValue<string>,
    relicId: PromiseOrValue<BigNumberish>,
    shardIds: PromiseOrValue<BigNumberish>[],
    amounts: PromiseOrValue<BigNumberish>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setNexusCommon(
    _contract: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setRelicMinterEnclaveIds(
    minter: PromiseOrValue<string>,
    enclaveIds: PromiseOrValue<BigNumberish>[],
    allow: PromiseOrValue<boolean>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setRelicXP(
    relicId: PromiseOrValue<BigNumberish>,
    xp: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setShard(
    _shard: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setXPRarityThresholds(
    rarities: PromiseOrValue<BigNumberish>[],
    thresholds: PromiseOrValue<BigNumberish>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  supportsInterface(
    interfaceId: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  symbol(overrides?: CallOverrides): Promise<string>;

  tokenURI(
    tokenId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  totalMinted(overrides?: CallOverrides): Promise<BigNumber>;

  totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

  transferFrom(
    from: PromiseOrValue<string>,
    to: PromiseOrValue<string>,
    tokenId: PromiseOrValue<BigNumberish>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  unsetBlacklistedShards(
    account: PromiseOrValue<string>,
    relicId: PromiseOrValue<BigNumberish>,
    shardIds: PromiseOrValue<BigNumberish>[],
    amounts: PromiseOrValue<BigNumberish>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    approve(
      to: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    balanceOf(
      owner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    batchEquipShards(
      relicId: PromiseOrValue<BigNumberish>,
      shardIds: PromiseOrValue<BigNumberish>[],
      amounts: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<void>;

    batchUnequipShards(
      relicId: PromiseOrValue<BigNumberish>,
      shardIds: PromiseOrValue<BigNumberish>[],
      amounts: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<void>;

    blacklistedAccounts(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    blacklistedRelicShards(
      relicId: PromiseOrValue<BigNumberish>,
      shardId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    blacklistedShardsCount(
      relicId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    burnBlacklistedRelicShards(
      account: PromiseOrValue<string>,
      relicId: PromiseOrValue<BigNumberish>,
      shardIds: PromiseOrValue<BigNumberish>[],
      amounts: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<void>;

    checkpointRelicRarity(
      relicId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    getApproved(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    getEquippedShardIds(
      relicId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    getEquippedShards(
      relicId: PromiseOrValue<BigNumberish>,
      shardIds: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    getRarityBaseUri(
      rarity: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    getRelicInfo(
      relicId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<IRelic.RelicInfoViewStructOutput>;

    getRelicMinterEnclaveIds(
      minter: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    isApprovedForAll(
      owner: PromiseOrValue<string>,
      operator: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isRelicMinter(
      minter: PromiseOrValue<string>,
      enclaveId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    mintRelic(
      to: PromiseOrValue<string>,
      enclaveId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    name(overrides?: CallOverrides): Promise<string>;

    nextTokenId(overrides?: CallOverrides): Promise<BigNumber>;

    ownerOf(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    rarityXPThresholds(
      rarity: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    recoverToken(
      token: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    relicsOfOwner(
      _owner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    "safeTransferFrom(address,address,uint256)"(
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    "safeTransferFrom(address,address,uint256,bytes)"(
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      data: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    setApprovalForAll(
      operator: PromiseOrValue<string>,
      _approved: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<void>;

    setBaseUriRarity(
      rarity: PromiseOrValue<BigNumberish>,
      uri: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setBlacklistAccount(
      account: PromiseOrValue<string>,
      relicId: PromiseOrValue<BigNumberish>,
      blacklist: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<void>;

    setBlacklistedShards(
      account: PromiseOrValue<string>,
      relicId: PromiseOrValue<BigNumberish>,
      shardIds: PromiseOrValue<BigNumberish>[],
      amounts: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<void>;

    setNexusCommon(
      _contract: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setRelicMinterEnclaveIds(
      minter: PromiseOrValue<string>,
      enclaveIds: PromiseOrValue<BigNumberish>[],
      allow: PromiseOrValue<boolean>[],
      overrides?: CallOverrides
    ): Promise<void>;

    setRelicXP(
      relicId: PromiseOrValue<BigNumberish>,
      xp: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setShard(
      _shard: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setXPRarityThresholds(
      rarities: PromiseOrValue<BigNumberish>[],
      thresholds: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<void>;

    supportsInterface(
      interfaceId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    symbol(overrides?: CallOverrides): Promise<string>;

    tokenURI(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    totalMinted(overrides?: CallOverrides): Promise<BigNumber>;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    transferFrom(
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    unsetBlacklistedShards(
      account: PromiseOrValue<string>,
      relicId: PromiseOrValue<BigNumberish>,
      shardIds: PromiseOrValue<BigNumberish>[],
      amounts: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "AccountBlacklistSet(address,bool,uint256[],uint256[])"(
      account?: PromiseOrValue<string> | null,
      blacklist?: null,
      shardIds?: null,
      amounts?: null
    ): AccountBlacklistSetEventFilter;
    AccountBlacklistSet(
      account?: PromiseOrValue<string> | null,
      blacklist?: null,
      shardIds?: null,
      amounts?: null
    ): AccountBlacklistSetEventFilter;

    "AccountBlacklisted(address,bool)"(
      account?: PromiseOrValue<string> | null,
      blacklist?: null
    ): AccountBlacklistedEventFilter;
    AccountBlacklisted(
      account?: PromiseOrValue<string> | null,
      blacklist?: null
    ): AccountBlacklistedEventFilter;

    "Approval(address,address,uint256)"(
      owner?: PromiseOrValue<string> | null,
      approved?: PromiseOrValue<string> | null,
      tokenId?: PromiseOrValue<BigNumberish> | null
    ): ApprovalEventFilter;
    Approval(
      owner?: PromiseOrValue<string> | null,
      approved?: PromiseOrValue<string> | null,
      tokenId?: PromiseOrValue<BigNumberish> | null
    ): ApprovalEventFilter;

    "ApprovalForAll(address,address,bool)"(
      owner?: PromiseOrValue<string> | null,
      operator?: PromiseOrValue<string> | null,
      approved?: null
    ): ApprovalForAllEventFilter;
    ApprovalForAll(
      owner?: PromiseOrValue<string> | null,
      operator?: PromiseOrValue<string> | null,
      approved?: null
    ): ApprovalForAllEventFilter;

    "ConsecutiveTransfer(uint256,uint256,address,address)"(
      fromTokenId?: PromiseOrValue<BigNumberish> | null,
      toTokenId?: null,
      from?: PromiseOrValue<string> | null,
      to?: PromiseOrValue<string> | null
    ): ConsecutiveTransferEventFilter;
    ConsecutiveTransfer(
      fromTokenId?: PromiseOrValue<BigNumberish> | null,
      toTokenId?: null,
      from?: PromiseOrValue<string> | null,
      to?: PromiseOrValue<string> | null
    ): ConsecutiveTransferEventFilter;

    "EnclaveNameSet(uint256,string)"(
      id?: null,
      name?: null
    ): EnclaveNameSetEventFilter;
    EnclaveNameSet(id?: null, name?: null): EnclaveNameSetEventFilter;

    "NexusCommonSet(address)"(
      nexusCommon?: PromiseOrValue<string> | null
    ): NexusCommonSetEventFilter;
    NexusCommonSet(
      nexusCommon?: PromiseOrValue<string> | null
    ): NexusCommonSetEventFilter;

    "RarityBaseUriSet(uint8,string)"(
      rarity?: null,
      uri?: null
    ): RarityBaseUriSetEventFilter;
    RarityBaseUriSet(rarity?: null, uri?: null): RarityBaseUriSetEventFilter;

    "RarityXPThresholdSet(uint8,uint256)"(
      rarity?: null,
      threshold?: null
    ): RarityXPThresholdSetEventFilter;
    RarityXPThresholdSet(
      rarity?: null,
      threshold?: null
    ): RarityXPThresholdSetEventFilter;

    "RelicMinted(address,uint256,uint256)"(
      to?: PromiseOrValue<string> | null,
      relicId?: null,
      enclaveId?: null
    ): RelicMintedEventFilter;
    RelicMinted(
      to?: PromiseOrValue<string> | null,
      relicId?: null,
      enclaveId?: null
    ): RelicMintedEventFilter;

    "RelicMinterEnclaveSet(address,uint256,bool)"(
      minter?: PromiseOrValue<string> | null,
      enclaveId?: null,
      allowed?: null
    ): RelicMinterEnclaveSetEventFilter;
    RelicMinterEnclaveSet(
      minter?: PromiseOrValue<string> | null,
      enclaveId?: null,
      allowed?: null
    ): RelicMinterEnclaveSetEventFilter;

    "RelicXPSet(uint256,uint256)"(
      relicId?: PromiseOrValue<BigNumberish> | null,
      xp?: null
    ): RelicXPSetEventFilter;
    RelicXPSet(
      relicId?: PromiseOrValue<BigNumberish> | null,
      xp?: null
    ): RelicXPSetEventFilter;

    "ShardBlacklistUpdated(uint256,uint256,uint256)"(
      relicId?: null,
      shardId?: null,
      amount?: null
    ): ShardBlacklistUpdatedEventFilter;
    ShardBlacklistUpdated(
      relicId?: null,
      shardId?: null,
      amount?: null
    ): ShardBlacklistUpdatedEventFilter;

    "ShardSet(address)"(
      shard?: PromiseOrValue<string> | null
    ): ShardSetEventFilter;
    ShardSet(shard?: PromiseOrValue<string> | null): ShardSetEventFilter;

    "ShardsEquipped(address,uint256,uint256[],uint256[])"(
      caller?: PromiseOrValue<string> | null,
      relicId?: PromiseOrValue<BigNumberish> | null,
      shardIds?: null,
      amounts?: null
    ): ShardsEquippedEventFilter;
    ShardsEquipped(
      caller?: PromiseOrValue<string> | null,
      relicId?: PromiseOrValue<BigNumberish> | null,
      shardIds?: null,
      amounts?: null
    ): ShardsEquippedEventFilter;

    "ShardsUnequipped(address,uint256,uint256[],uint256[])"(
      recipient?: PromiseOrValue<string> | null,
      relicId?: PromiseOrValue<BigNumberish> | null,
      shardIds?: null,
      amounts?: null
    ): ShardsUnequippedEventFilter;
    ShardsUnequipped(
      recipient?: PromiseOrValue<string> | null,
      relicId?: PromiseOrValue<BigNumberish> | null,
      shardIds?: null,
      amounts?: null
    ): ShardsUnequippedEventFilter;

    "Transfer(address,address,uint256)"(
      from?: PromiseOrValue<string> | null,
      to?: PromiseOrValue<string> | null,
      tokenId?: PromiseOrValue<BigNumberish> | null
    ): TransferEventFilter;
    Transfer(
      from?: PromiseOrValue<string> | null,
      to?: PromiseOrValue<string> | null,
      tokenId?: PromiseOrValue<BigNumberish> | null
    ): TransferEventFilter;
  };

  estimateGas: {
    approve(
      to: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    balanceOf(
      owner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    batchEquipShards(
      relicId: PromiseOrValue<BigNumberish>,
      shardIds: PromiseOrValue<BigNumberish>[],
      amounts: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    batchUnequipShards(
      relicId: PromiseOrValue<BigNumberish>,
      shardIds: PromiseOrValue<BigNumberish>[],
      amounts: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    blacklistedAccounts(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    blacklistedRelicShards(
      relicId: PromiseOrValue<BigNumberish>,
      shardId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    blacklistedShardsCount(
      relicId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    burnBlacklistedRelicShards(
      account: PromiseOrValue<string>,
      relicId: PromiseOrValue<BigNumberish>,
      shardIds: PromiseOrValue<BigNumberish>[],
      amounts: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    checkpointRelicRarity(
      relicId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    getApproved(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getEquippedShardIds(
      relicId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getEquippedShards(
      relicId: PromiseOrValue<BigNumberish>,
      shardIds: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRarityBaseUri(
      rarity: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRelicInfo(
      relicId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRelicMinterEnclaveIds(
      minter: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isApprovedForAll(
      owner: PromiseOrValue<string>,
      operator: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isRelicMinter(
      minter: PromiseOrValue<string>,
      enclaveId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    mintRelic(
      to: PromiseOrValue<string>,
      enclaveId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    name(overrides?: CallOverrides): Promise<BigNumber>;

    nextTokenId(overrides?: CallOverrides): Promise<BigNumber>;

    ownerOf(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    rarityXPThresholds(
      rarity: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    recoverToken(
      token: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    relicsOfOwner(
      _owner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "safeTransferFrom(address,address,uint256)"(
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "safeTransferFrom(address,address,uint256,bytes)"(
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      data: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setApprovalForAll(
      operator: PromiseOrValue<string>,
      _approved: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setBaseUriRarity(
      rarity: PromiseOrValue<BigNumberish>,
      uri: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setBlacklistAccount(
      account: PromiseOrValue<string>,
      relicId: PromiseOrValue<BigNumberish>,
      blacklist: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setBlacklistedShards(
      account: PromiseOrValue<string>,
      relicId: PromiseOrValue<BigNumberish>,
      shardIds: PromiseOrValue<BigNumberish>[],
      amounts: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setNexusCommon(
      _contract: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setRelicMinterEnclaveIds(
      minter: PromiseOrValue<string>,
      enclaveIds: PromiseOrValue<BigNumberish>[],
      allow: PromiseOrValue<boolean>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setRelicXP(
      relicId: PromiseOrValue<BigNumberish>,
      xp: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setShard(
      _shard: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setXPRarityThresholds(
      rarities: PromiseOrValue<BigNumberish>[],
      thresholds: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    supportsInterface(
      interfaceId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    symbol(overrides?: CallOverrides): Promise<BigNumber>;

    tokenURI(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    totalMinted(overrides?: CallOverrides): Promise<BigNumber>;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    transferFrom(
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    unsetBlacklistedShards(
      account: PromiseOrValue<string>,
      relicId: PromiseOrValue<BigNumberish>,
      shardIds: PromiseOrValue<BigNumberish>[],
      amounts: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    approve(
      to: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    balanceOf(
      owner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    batchEquipShards(
      relicId: PromiseOrValue<BigNumberish>,
      shardIds: PromiseOrValue<BigNumberish>[],
      amounts: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    batchUnequipShards(
      relicId: PromiseOrValue<BigNumberish>,
      shardIds: PromiseOrValue<BigNumberish>[],
      amounts: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    blacklistedAccounts(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    blacklistedRelicShards(
      relicId: PromiseOrValue<BigNumberish>,
      shardId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    blacklistedShardsCount(
      relicId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    burnBlacklistedRelicShards(
      account: PromiseOrValue<string>,
      relicId: PromiseOrValue<BigNumberish>,
      shardIds: PromiseOrValue<BigNumberish>[],
      amounts: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    checkpointRelicRarity(
      relicId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    getApproved(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getEquippedShardIds(
      relicId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getEquippedShards(
      relicId: PromiseOrValue<BigNumberish>,
      shardIds: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getRarityBaseUri(
      rarity: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getRelicInfo(
      relicId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getRelicMinterEnclaveIds(
      minter: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isApprovedForAll(
      owner: PromiseOrValue<string>,
      operator: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isRelicMinter(
      minter: PromiseOrValue<string>,
      enclaveId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    mintRelic(
      to: PromiseOrValue<string>,
      enclaveId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    name(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    nextTokenId(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    ownerOf(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    rarityXPThresholds(
      rarity: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    recoverToken(
      token: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    relicsOfOwner(
      _owner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "safeTransferFrom(address,address,uint256)"(
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "safeTransferFrom(address,address,uint256,bytes)"(
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      data: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setApprovalForAll(
      operator: PromiseOrValue<string>,
      _approved: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setBaseUriRarity(
      rarity: PromiseOrValue<BigNumberish>,
      uri: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setBlacklistAccount(
      account: PromiseOrValue<string>,
      relicId: PromiseOrValue<BigNumberish>,
      blacklist: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setBlacklistedShards(
      account: PromiseOrValue<string>,
      relicId: PromiseOrValue<BigNumberish>,
      shardIds: PromiseOrValue<BigNumberish>[],
      amounts: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setNexusCommon(
      _contract: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setRelicMinterEnclaveIds(
      minter: PromiseOrValue<string>,
      enclaveIds: PromiseOrValue<BigNumberish>[],
      allow: PromiseOrValue<boolean>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setRelicXP(
      relicId: PromiseOrValue<BigNumberish>,
      xp: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setShard(
      _shard: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setXPRarityThresholds(
      rarities: PromiseOrValue<BigNumberish>[],
      thresholds: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    supportsInterface(
      interfaceId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    symbol(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    tokenURI(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    totalMinted(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalSupply(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transferFrom(
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    unsetBlacklistedShards(
      account: PromiseOrValue<string>,
      relicId: PromiseOrValue<BigNumberish>,
      shardIds: PromiseOrValue<BigNumberish>[],
      amounts: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
