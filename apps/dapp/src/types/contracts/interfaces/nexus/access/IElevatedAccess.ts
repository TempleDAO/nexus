/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../../../common";

export declare namespace IElevatedAccess {
  export type ExplicitAccessStruct = {
    fnSelector: PromiseOrValue<BytesLike>;
    allowed: PromiseOrValue<boolean>;
  };

  export type ExplicitAccessStructOutput = [string, boolean] & {
    fnSelector: string;
    allowed: boolean;
  };
}

export interface IElevatedAccessInterface extends utils.Interface {
  functions: {
    "acceptExecutor()": FunctionFragment;
    "executor()": FunctionFragment;
    "explicitFunctionAccess(address,bytes4)": FunctionFragment;
    "proposeNewExecutor(address)": FunctionFragment;
    "setExplicitAccess(address,(bytes4,bool)[])": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "acceptExecutor"
      | "executor"
      | "explicitFunctionAccess"
      | "proposeNewExecutor"
      | "setExplicitAccess"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "acceptExecutor",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "executor", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "explicitFunctionAccess",
    values: [PromiseOrValue<string>, PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "proposeNewExecutor",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setExplicitAccess",
    values: [PromiseOrValue<string>, IElevatedAccess.ExplicitAccessStruct[]]
  ): string;

  decodeFunctionResult(
    functionFragment: "acceptExecutor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "executor", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "explicitFunctionAccess",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "proposeNewExecutor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setExplicitAccess",
    data: BytesLike
  ): Result;

  events: {
    "ExplicitAccessSet(address,bytes4,bool)": EventFragment;
    "NewExecutorAccepted(address,address)": EventFragment;
    "NewExecutorProposed(address,address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "ExplicitAccessSet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NewExecutorAccepted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NewExecutorProposed"): EventFragment;
}

export interface ExplicitAccessSetEventObject {
  account: string;
  fnSelector: string;
  value: boolean;
}
export type ExplicitAccessSetEvent = TypedEvent<
  [string, string, boolean],
  ExplicitAccessSetEventObject
>;

export type ExplicitAccessSetEventFilter =
  TypedEventFilter<ExplicitAccessSetEvent>;

export interface NewExecutorAcceptedEventObject {
  oldExecutor: string;
  newExecutor: string;
}
export type NewExecutorAcceptedEvent = TypedEvent<
  [string, string],
  NewExecutorAcceptedEventObject
>;

export type NewExecutorAcceptedEventFilter =
  TypedEventFilter<NewExecutorAcceptedEvent>;

export interface NewExecutorProposedEventObject {
  oldExecutor: string;
  oldProposedExecutor: string;
  newProposedExecutor: string;
}
export type NewExecutorProposedEvent = TypedEvent<
  [string, string, string],
  NewExecutorProposedEventObject
>;

export type NewExecutorProposedEventFilter =
  TypedEventFilter<NewExecutorProposedEvent>;

export interface IElevatedAccess extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IElevatedAccessInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    acceptExecutor(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    executor(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    explicitFunctionAccess(
      contractAddr: PromiseOrValue<string>,
      functionSelector: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    proposeNewExecutor(
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setExplicitAccess(
      allowedCaller: PromiseOrValue<string>,
      access: IElevatedAccess.ExplicitAccessStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  acceptExecutor(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  executor(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  explicitFunctionAccess(
    contractAddr: PromiseOrValue<string>,
    functionSelector: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  proposeNewExecutor(
    account: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setExplicitAccess(
    allowedCaller: PromiseOrValue<string>,
    access: IElevatedAccess.ExplicitAccessStruct[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    acceptExecutor(overrides?: CallOverrides): Promise<void>;

    executor(overrides?: CallOverrides): Promise<string>;

    explicitFunctionAccess(
      contractAddr: PromiseOrValue<string>,
      functionSelector: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    proposeNewExecutor(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setExplicitAccess(
      allowedCaller: PromiseOrValue<string>,
      access: IElevatedAccess.ExplicitAccessStruct[],
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "ExplicitAccessSet(address,bytes4,bool)"(
      account?: PromiseOrValue<string> | null,
      fnSelector?: PromiseOrValue<BytesLike> | null,
      value?: PromiseOrValue<boolean> | null
    ): ExplicitAccessSetEventFilter;
    ExplicitAccessSet(
      account?: PromiseOrValue<string> | null,
      fnSelector?: PromiseOrValue<BytesLike> | null,
      value?: PromiseOrValue<boolean> | null
    ): ExplicitAccessSetEventFilter;

    "NewExecutorAccepted(address,address)"(
      oldExecutor?: PromiseOrValue<string> | null,
      newExecutor?: PromiseOrValue<string> | null
    ): NewExecutorAcceptedEventFilter;
    NewExecutorAccepted(
      oldExecutor?: PromiseOrValue<string> | null,
      newExecutor?: PromiseOrValue<string> | null
    ): NewExecutorAcceptedEventFilter;

    "NewExecutorProposed(address,address,address)"(
      oldExecutor?: PromiseOrValue<string> | null,
      oldProposedExecutor?: PromiseOrValue<string> | null,
      newProposedExecutor?: PromiseOrValue<string> | null
    ): NewExecutorProposedEventFilter;
    NewExecutorProposed(
      oldExecutor?: PromiseOrValue<string> | null,
      oldProposedExecutor?: PromiseOrValue<string> | null,
      newProposedExecutor?: PromiseOrValue<string> | null
    ): NewExecutorProposedEventFilter;
  };

  estimateGas: {
    acceptExecutor(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    executor(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    explicitFunctionAccess(
      contractAddr: PromiseOrValue<string>,
      functionSelector: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    proposeNewExecutor(
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setExplicitAccess(
      allowedCaller: PromiseOrValue<string>,
      access: IElevatedAccess.ExplicitAccessStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    acceptExecutor(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    executor(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    explicitFunctionAccess(
      contractAddr: PromiseOrValue<string>,
      functionSelector: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    proposeNewExecutor(
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setExplicitAccess(
      allowedCaller: PromiseOrValue<string>,
      access: IElevatedAccess.ExplicitAccessStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
