/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../../../common";

export interface ISacrificeInterface extends utils.Interface {
  functions: {
    "getPrice()": FunctionFragment;
    "sacrifice(uint256,address)": FunctionFragment;
    "setOriginTime(uint64)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic: "getPrice" | "sacrifice" | "setOriginTime"
  ): FunctionFragment;

  encodeFunctionData(functionFragment: "getPrice", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "sacrifice",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setOriginTime",
    values: [PromiseOrValue<BigNumberish>]
  ): string;

  decodeFunctionResult(functionFragment: "getPrice", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "sacrifice", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setOriginTime",
    data: BytesLike
  ): Result;

  events: {
    "OriginTimeSet(uint64)": EventFragment;
    "PartnerZeroSacrificed(address,uint256,uint256)": EventFragment;
    "RelicMintCapSet(uint256)": EventFragment;
    "TokenSacrificed(address,address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "OriginTimeSet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PartnerZeroSacrificed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RelicMintCapSet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TokenSacrificed"): EventFragment;
}

export interface OriginTimeSetEventObject {
  originTime: BigNumber;
}
export type OriginTimeSetEvent = TypedEvent<
  [BigNumber],
  OriginTimeSetEventObject
>;

export type OriginTimeSetEventFilter = TypedEventFilter<OriginTimeSetEvent>;

export interface PartnerZeroSacrificedEventObject {
  to: string;
  relicId: BigNumber;
  enclaveId: BigNumber;
}
export type PartnerZeroSacrificedEvent = TypedEvent<
  [string, BigNumber, BigNumber],
  PartnerZeroSacrificedEventObject
>;

export type PartnerZeroSacrificedEventFilter =
  TypedEventFilter<PartnerZeroSacrificedEvent>;

export interface RelicMintCapSetEventObject {
  cap: BigNumber;
}
export type RelicMintCapSetEvent = TypedEvent<
  [BigNumber],
  RelicMintCapSetEventObject
>;

export type RelicMintCapSetEventFilter = TypedEventFilter<RelicMintCapSetEvent>;

export interface TokenSacrificedEventObject {
  fromAccount: string;
  token: string;
  amount: BigNumber;
}
export type TokenSacrificedEvent = TypedEvent<
  [string, string, BigNumber],
  TokenSacrificedEventObject
>;

export type TokenSacrificedEventFilter = TypedEventFilter<TokenSacrificedEvent>;

export interface ISacrifice extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: ISacrificeInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    getPrice(overrides?: CallOverrides): Promise<[BigNumber]>;

    sacrifice(
      enclaveId: PromiseOrValue<BigNumberish>,
      to: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setOriginTime(
      _originTime: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  getPrice(overrides?: CallOverrides): Promise<BigNumber>;

  sacrifice(
    enclaveId: PromiseOrValue<BigNumberish>,
    to: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setOriginTime(
    _originTime: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    getPrice(overrides?: CallOverrides): Promise<BigNumber>;

    sacrifice(
      enclaveId: PromiseOrValue<BigNumberish>,
      to: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    setOriginTime(
      _originTime: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "OriginTimeSet(uint64)"(originTime?: null): OriginTimeSetEventFilter;
    OriginTimeSet(originTime?: null): OriginTimeSetEventFilter;

    "PartnerZeroSacrificed(address,uint256,uint256)"(
      to?: PromiseOrValue<string> | null,
      relicId?: null,
      enclaveId?: null
    ): PartnerZeroSacrificedEventFilter;
    PartnerZeroSacrificed(
      to?: PromiseOrValue<string> | null,
      relicId?: null,
      enclaveId?: null
    ): PartnerZeroSacrificedEventFilter;

    "RelicMintCapSet(uint256)"(cap?: null): RelicMintCapSetEventFilter;
    RelicMintCapSet(cap?: null): RelicMintCapSetEventFilter;

    "TokenSacrificed(address,address,uint256)"(
      fromAccount?: PromiseOrValue<string> | null,
      token?: PromiseOrValue<string> | null,
      amount?: null
    ): TokenSacrificedEventFilter;
    TokenSacrificed(
      fromAccount?: PromiseOrValue<string> | null,
      token?: PromiseOrValue<string> | null,
      amount?: null
    ): TokenSacrificedEventFilter;
  };

  estimateGas: {
    getPrice(overrides?: CallOverrides): Promise<BigNumber>;

    sacrifice(
      enclaveId: PromiseOrValue<BigNumberish>,
      to: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setOriginTime(
      _originTime: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    getPrice(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    sacrifice(
      enclaveId: PromiseOrValue<BigNumberish>,
      to: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setOriginTime(
      _originTime: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
