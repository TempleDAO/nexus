/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../../common";

export interface INexusCommonInterface extends utils.Interface {
  functions: {
    "enclaveNames(uint256)": FunctionFragment;
    "getAllEnclaveIds()": FunctionFragment;
    "getEnclaveShards(uint256)": FunctionFragment;
    "isValidEnclaveId(uint256)": FunctionFragment;
    "setEnclaveName(uint256,string)": FunctionFragment;
    "setShard(address)": FunctionFragment;
    "setShardEnclave(uint256,uint256)": FunctionFragment;
    "shardToEnclave(uint256)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "enclaveNames"
      | "getAllEnclaveIds"
      | "getEnclaveShards"
      | "isValidEnclaveId"
      | "setEnclaveName"
      | "setShard"
      | "setShardEnclave"
      | "shardToEnclave"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "enclaveNames",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getAllEnclaveIds",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getEnclaveShards",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "isValidEnclaveId",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setEnclaveName",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setShard",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setShardEnclave",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "shardToEnclave",
    values: [PromiseOrValue<BigNumberish>]
  ): string;

  decodeFunctionResult(
    functionFragment: "enclaveNames",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAllEnclaveIds",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getEnclaveShards",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isValidEnclaveId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setEnclaveName",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setShard", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setShardEnclave",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "shardToEnclave",
    data: BytesLike
  ): Result;

  events: {
    "EnclaveNameSet(uint256,string)": EventFragment;
    "ShardEnclaveSet(uint256,uint256)": EventFragment;
    "ShardSet(address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "EnclaveNameSet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ShardEnclaveSet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ShardSet"): EventFragment;
}

export interface EnclaveNameSetEventObject {
  id: BigNumber;
  name: string;
}
export type EnclaveNameSetEvent = TypedEvent<
  [BigNumber, string],
  EnclaveNameSetEventObject
>;

export type EnclaveNameSetEventFilter = TypedEventFilter<EnclaveNameSetEvent>;

export interface ShardEnclaveSetEventObject {
  enclaveId: BigNumber;
  shardId: BigNumber;
}
export type ShardEnclaveSetEvent = TypedEvent<
  [BigNumber, BigNumber],
  ShardEnclaveSetEventObject
>;

export type ShardEnclaveSetEventFilter = TypedEventFilter<ShardEnclaveSetEvent>;

export interface ShardSetEventObject {
  shard: string;
}
export type ShardSetEvent = TypedEvent<[string], ShardSetEventObject>;

export type ShardSetEventFilter = TypedEventFilter<ShardSetEvent>;

export interface INexusCommon extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: INexusCommonInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    enclaveNames(
      enclaveId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    getAllEnclaveIds(
      overrides?: CallOverrides
    ): Promise<[BigNumber[]] & { ids: BigNumber[] }>;

    getEnclaveShards(
      enclaveId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber[]]>;

    isValidEnclaveId(
      enclaveId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    setEnclaveName(
      id: PromiseOrValue<BigNumberish>,
      name: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setShard(
      _shard: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setShardEnclave(
      enclaveId: PromiseOrValue<BigNumberish>,
      shardId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    shardToEnclave(
      shardId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  enclaveNames(
    enclaveId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  getAllEnclaveIds(overrides?: CallOverrides): Promise<BigNumber[]>;

  getEnclaveShards(
    enclaveId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber[]>;

  isValidEnclaveId(
    enclaveId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  setEnclaveName(
    id: PromiseOrValue<BigNumberish>,
    name: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setShard(
    _shard: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setShardEnclave(
    enclaveId: PromiseOrValue<BigNumberish>,
    shardId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  shardToEnclave(
    shardId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    enclaveNames(
      enclaveId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    getAllEnclaveIds(overrides?: CallOverrides): Promise<BigNumber[]>;

    getEnclaveShards(
      enclaveId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    isValidEnclaveId(
      enclaveId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    setEnclaveName(
      id: PromiseOrValue<BigNumberish>,
      name: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setShard(
      _shard: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setShardEnclave(
      enclaveId: PromiseOrValue<BigNumberish>,
      shardId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    shardToEnclave(
      shardId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  filters: {
    "EnclaveNameSet(uint256,string)"(
      id?: null,
      name?: null
    ): EnclaveNameSetEventFilter;
    EnclaveNameSet(id?: null, name?: null): EnclaveNameSetEventFilter;

    "ShardEnclaveSet(uint256,uint256)"(
      enclaveId?: null,
      shardId?: PromiseOrValue<BigNumberish> | null
    ): ShardEnclaveSetEventFilter;
    ShardEnclaveSet(
      enclaveId?: null,
      shardId?: PromiseOrValue<BigNumberish> | null
    ): ShardEnclaveSetEventFilter;

    "ShardSet(address)"(
      shard?: PromiseOrValue<string> | null
    ): ShardSetEventFilter;
    ShardSet(shard?: PromiseOrValue<string> | null): ShardSetEventFilter;
  };

  estimateGas: {
    enclaveNames(
      enclaveId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    getAllEnclaveIds(overrides?: CallOverrides): Promise<BigNumber>;

    getEnclaveShards(
      enclaveId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isValidEnclaveId(
      enclaveId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    setEnclaveName(
      id: PromiseOrValue<BigNumberish>,
      name: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setShard(
      _shard: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setShardEnclave(
      enclaveId: PromiseOrValue<BigNumberish>,
      shardId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    shardToEnclave(
      shardId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    enclaveNames(
      enclaveId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    getAllEnclaveIds(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getEnclaveShards(
      enclaveId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isValidEnclaveId(
      enclaveId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    setEnclaveName(
      id: PromiseOrValue<BigNumberish>,
      name: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setShard(
      _shard: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setShardEnclave(
      enclaveId: PromiseOrValue<BigNumberish>,
      shardId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    shardToEnclave(
      shardId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
